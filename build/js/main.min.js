(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _wapper = require("./modules/wapper");
var _localisation = require("./modules/localisation");
var _langSwitcher = require("./modules/lang-switcher");
var _setName = require("./modules/set-name");
var _logout = require("./modules/logout");
var _slider = require("./modules/slider");
var _tabs = require("./modules/tabs");
var _dropdown = require("./modules/dropdown");
var _showPassword = require("./modules/show-password");
var _readonlySwitch = require("./modules/readonly-switch");
var _selectOther = require("./modules/select-other");
var _clientsBtns = require("./modules/clients-btns");
var _modal = require("./modules/modal");
var _clientCard = require("./modules/client-card");
var _mySwiper = require("./modules/my-swiper");
var _pickdate = require("./modules/pickdate");
var _schedule = require("./modules/schedule");
var _redirectProfile = require("./modules/redirect-profile");
var _utilsBtns = require("./modules/utils-btns");
var _uploadUserPhoto = require("./modules/upload-user-photo");
var _aminAlerts = require("./modules/amin-alerts");
// import {validateTextarea} from './modules/textarea';

// TODO: delete

// END TODO

var savedLanguage = localStorage.getItem('language') || 'en';

// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  (0, _iosVhFix.iosVhFix)();
  (0, _wapper.setWrapperClass)();
  (0, _localisation.loadLanguage)(savedLanguage);
  (0, _logout.logOut)();
  (0, _langSwitcher.setLangBtn)();
  (0, _setName.setName)();
  (0, _aminAlerts.initAdminAlerts)();

  // Modules
  // ---------------------------------

  window.addEventListener('load', function () {
    (0, _slider.initSlider)();
    (0, _tabs.initTabs)();
    (0, _dropdown.showDropdownList)();
    (0, _showPassword.showPassword)();
    (0, _readonlySwitch.switchReadonly)();
    // validateTextarea();
    (0, _selectOther.showTextInput)();
    (0, _clientsBtns.initActionsBtns)();
    (0, _modal.initModal)();
    (0, _clientCard.setClientCard)();
    (0, _mySwiper.initSwiper)();
    (0, _pickdate.setChoiceBtn)();
    (0, _schedule.expandList)();
    (0, _schedule.initScheduleDropdown)();
    // TODO: delete
    (0, _utilsBtns.setUtilsBtns)();
    // END TODO
    (0, _redirectProfile.redirectToProfile)();
    (0, _uploadUserPhoto.uploadUserPhoto)();
  });
});

},{"./modules/amin-alerts":2,"./modules/client-card":3,"./modules/clients-btns":4,"./modules/dropdown":5,"./modules/lang-switcher":6,"./modules/localisation":7,"./modules/logout":8,"./modules/modal":9,"./modules/my-swiper":10,"./modules/pickdate":11,"./modules/readonly-switch":12,"./modules/redirect-profile":13,"./modules/schedule":14,"./modules/select-other":15,"./modules/set-name":16,"./modules/show-password":17,"./modules/slider":18,"./modules/tabs":19,"./modules/upload-user-photo":20,"./modules/utils-btns":21,"./modules/wapper":22,"./utils/ios-vh-fix":24}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAdminAlerts = initAdminAlerts;
var admin = document.querySelector('.admin .internal');
var sessionWarningKey = 'sessionWarningShown';
var sessionTimeout;
var warningTimeout;
function showAlert(id) {
  var el = document.getElementById(id);
  el.classList.add('is-active');
}
function hideAlert(id) {
  var el = document.getElementById(id);
  el.classList.remove('is-active');
}
function adminLogout() {
  var savedLang = localStorage.getItem('language') || 'en';
  localStorage.clear();
  localStorage.setItem('language', savedLang);
  localStorage.setItem(sessionWarningKey, 'false');
  window.location.href = '/admin-login.html';
}
function resetTimers() {
  hideAlert('logout-warning');
  clearTimeout(sessionTimeout);
  clearTimeout(warningTimeout);
  if (!localStorage.getItem(sessionWarningKey)) {
    showAlert('session-warning');
    localStorage.setItem(sessionWarningKey, 'true');
  }
  warningTimeout = setTimeout(function () {
    showAlert('logout-warning');
  }, 14 * 60 * 1000);
  sessionTimeout = setTimeout(function () {
    adminLogout();
  }, 15 * 60 * 1000);
}
function initAdminAlerts() {
  if (!admin) {
    return;
  }
  resetTimers(); // Инициализация таймеров при загрузке страницы

  // Сброс таймеров при активности
  document.addEventListener('mousemove', resetTimers);
  document.addEventListener('keypress', resetTimers);
}

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setClientCard = setClientCard;
var userName = document.querySelectorAll('.clients__client-name');
var clientCard = document.querySelector('.client-card');
function setClientCard() {
  if (clientCard) {
    var cardName = clientCard.querySelector('.client-card__username');
    var cardId = clientCard.querySelector('.client-card__userid');
    var cardAge = clientCard.querySelector('.client-card__age');
    var cardAmount = clientCard.querySelector('.client-card__sessions-amount');
    var cardNextSession = clientCard.querySelector('.client-card__next-session');
    userName.forEach(function (user) {
      var currentItem = user.closest('.clients__item');
      var currentId = currentItem.querySelector('.clients__client-id');
      var currentAge = currentItem.querySelector('.clients__client-age');
      var currentAmount = currentItem.querySelector('.clients__sessions-amount');
      var currentNextSession = currentItem.querySelector('.clients__next-session');
      user.addEventListener('click', function () {
        cardName.textContent = user.textContent;
        cardId.textContent = currentId.textContent;
        cardAge.textContent = currentAge.textContent;
        cardAmount.textContent = currentAmount.textContent;
        cardNextSession.textContent = currentNextSession.textContent;
      });
    });
  }
}

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initActionsBtns = initActionsBtns;
// Страница /doctor-account-clients.html, кнопки действий в графе "Статус сессии"

var clients = document.querySelector('.clients');
function closeAll(arr) {
  arr.forEach(function (el) {
    if (el.classList.contains('is-active')) {
      el.classList.remove('is-active');
    }
  });
}
function initActionsBtns() {
  if (!clients) {
    return;
  }
  var actionsBtns = document.querySelectorAll('.clients__session-status');
  actionsBtns.forEach(function (btn) {
    btn.addEventListener('click', function (e) {
      e.stopPropagation();
      closeAll(document.querySelectorAll('.clients__actions'));
      var currentActions = btn.closest('.clients__item').querySelector('.clients__actions');
      if (!currentActions.classList.contains('is-active')) {
        currentActions.classList.add('is-active');
      }
    });
  });
  var clientsCloseBtns = document.querySelectorAll('.clients__actions-close');
  clientsCloseBtns.forEach(function (btn) {
    btn.addEventListener('click', function (e) {
      e.stopPropagation();
      btn.closest('.clients__actions').classList.remove('is-active');
    });
  });
  document.addEventListener('click', function () {
    closeAll(document.querySelectorAll('.clients__actions'));
  });
}

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showDropdownList = showDropdownList;
var triggers = document.querySelectorAll('.js-dropdown-trigger');
function showDropdownList() {
  triggers.forEach(function (el) {
    var currentEl = el;
    var dataId = currentEl.getAttribute('data-id');
    var currentList = document.querySelector(dataId);
    el.addEventListener('click', function (e) {
      e.preventDefault();
      if (!currentList.classList.contains('is-active')) {
        currentList.classList.add('is-active');
        currentEl.classList.add('is-active');
      } else {
        currentList.classList.remove('is-active');
        currentEl.classList.remove('is-active');
      }
    });
    document.addEventListener('click', function (e) {
      if (currentList.classList.contains('is-active') && e.target !== el && !el.contains(e.target)) {
        currentList.classList.remove('is-active');
        currentEl.classList.remove('is-active');
      }
    });
    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') {
        currentList.classList.remove('is-active');
        currentEl.classList.remove('is-active');
      }
    });
  });
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLangBtn = setLangBtn;
var currentLanguage = document.querySelectorAll('.current-language');
var lang = localStorage.getItem('language');
function setLangBtn() {
  currentLanguage.forEach(function (el) {
    switch (lang) {
      case 'ru':
        el.textContent = 'Русский';
        break;
      case 'en':
        el.textContent = 'English';
        break;
      case 'hu':
        el.textContent = 'Magyar';
        break;
      default:
        el.textContent = 'English';
    }
  });
}

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadLanguage = loadLanguage;
var switchElements = document.querySelectorAll('[data-lang]');
// Функция для загрузки JSON-файла
function loadLanguage(lang) {
  fetch("./locales/".concat(lang, ".json")).then(function (response) {
    return response.json();
  }).then(function (translations) {
    translatePage(translations);
  }).catch(function (error) {
    return console.error('Error loading language file:', error);
  });
}

// Функция для замены текста на странице
function translatePage(translations) {
  var _loop = function _loop(key) {
    if (Object.hasOwn(translations, key)) {
      var elements = document.querySelectorAll("[data-translate=\"".concat(key, "\"]"));
      elements.forEach(function (element) {
        if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
          // Обновление плейсхолдера для инпутов
          element.placeholder = translations[key];
        } else {
          // Обновление текста для других элементов
          element.textContent = translations[key];
        }
      });
    }
  };
  for (var key in translations) {
    _loop(key);
  }

  // Обработчики событий для кнопок выбора языка
  switchElements.forEach(function (el) {
    el.addEventListener('click', function (e) {
      e.preventDefault();
      var lang = el.getAttribute('data-lang');
      loadLanguage(lang);
      saveLanguage(lang);
      setButtonText(lang);
    });
  });
}

// Сохранение выбранного языка
function saveLanguage(lang) {
  localStorage.setItem('language', lang);
}
function setButtonText(lang) {
  var currentLanguage = document.querySelectorAll('.current-language');
  currentLanguage.forEach(function (el) {
    switch (lang) {
      case 'ru':
        el.textContent = 'Русский';
        break;
      case 'en':
        el.textContent = 'English';
        break;
      case 'hu':
        el.textContent = 'Magyar';
        break;
      default:
        el.textContent = 'English';
    }
  });
}

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logOut = logOut;
var logoutBtns = document.querySelectorAll('.logout-btn');
function logOut() {
  if (!logOut) {
    return;
  }
  logoutBtns.forEach(function (btn) {
    btn.addEventListener('click', function (e) {
      e.preventDefault();
      var savedLang = localStorage.getItem('language') || 'en';
      localStorage.clear();
      localStorage.setItem('language', savedLang);
      var currentUrl = window.location.href;
      if (currentUrl.includes('admin')) {
        window.location.href = '/admin-login.html';
      } else {
        window.location.href = '/index.html';
      }
    });
  });
}

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initModal = initModal;
var modalOpenElements = document.querySelectorAll('[data-open-modal]');
var modalCloseElements = document.querySelectorAll('[data-close-modal]');
var modals = document.querySelectorAll('.modal');
var modalItems = document.querySelectorAll('.modal__item');
function prepareOpening() {
  modals.forEach(function (el) {
    setTimeout(function () {
      el.classList.remove('modal--preload');
    }, 100);
  });
}
function prepareClosing() {
  modals.forEach(function (el) {
    el.classList.remove('is-active');
  });
  modalItems.forEach(function (el) {
    el.classList.remove('is-active');
  });
}
function initModal() {
  prepareOpening();
  modalOpenElements.forEach(function (el) {
    var currentEl = el;
    var modalId = currentEl.getAttribute('data-modal-id');
    var currentModal = document.querySelector(modalId);
    var itemId = currentEl.getAttribute('data-item-id');
    var currentItem = document.querySelector(itemId);
    el.addEventListener('click', function (e) {
      e.preventDefault();
      currentModal.classList.add('is-active');
      if (currentItem) {
        currentItem.classList.add('is-active');
      }
    });
  });
  modalCloseElements.forEach(function (el) {
    el.addEventListener('click', function () {
      prepareClosing();
    });
  });
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
      prepareClosing();
    }
  });
}

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSwiper = initSwiper;
var swiper = document.querySelector('#swiper-1');
function initSwiper() {
  if (!swiper) {
    return;
  }

  // eslint-disable-next-line
  new Swiper('#swiper-1', {
    navigation: {
      nextEl: '.swiper-btn--next',
      prevEl: '.swiper-btn--prev'
    },
    loop: false,
    slidesPerView: '8',
    spaceBetween: 47
  });
}

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setChoiceBtn = setChoiceBtn;
var choiceDateForm = document.querySelectorAll('.choice-date-form');

// Функция для форматирования даты
function renderDate(data) {
  var schTime = data;
  var date = new Date(schTime);
  var language = localStorage.getItem('language') || 'en';
  var optionsDate;
  if (language === 'en') {
    optionsDate = {
      day: 'numeric',
      month: 'long'
    };
  } else {
    optionsDate = {
      day: 'numeric',
      month: 'long'
    };
  }
  var formattedDate = date.toLocaleString(language === 'en' ? 'en-US' : 'ru-RU', optionsDate);
  var finalDate = "".concat(formattedDate);
  return finalDate;
}
function setChoiceBtn() {
  if (!choiceDateForm) {
    return;
  }
  choiceDateForm.forEach(function (form) {
    var slots = form.querySelectorAll('input[type="radio"]');
    var submitBtn = form.querySelector('button[type="submit"]');
    var dateTime = submitBtn.querySelector('.doctor__submit-date');
    var errorMsg = form.querySelector('.error-message');
    if (!slots.length) {
      setTimeout(function () {
        setChoiceBtn();
      }, 200);
      return;
    }
    slots.forEach(function (slot) {
      if (!slot.getAttribute('data-id') || slot.getAttribute('data-id') === '') {
        setTimeout(function () {
          setChoiceBtn();
        }, 200);
        return;
      }
      slot.addEventListener('change', function () {
        errorMsg.classList.remove('is-active');
        submitBtn.disabled = false;
        submitBtn.classList.add('is-enabled');
        submitBtn.setAttribute('data-id', slot.getAttribute('data-id'));
        var currentDay = slot.getAttribute('data-time');
        var currentDatetime = slot.getAttribute('value');
        dateTime.textContent = " ".concat(renderDate(currentDay), " ").concat(currentDatetime, " ");
      });
    });
  });
}

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.switchReadonly = switchReadonly;
var editBtns = document.querySelectorAll('.settings__edit-btn');
function toggleAttribute(inp, btn) {
  var language = localStorage.getItem('language') || 'en';
  var texts = {
    en: {
      apply: 'Apply',
      edit: 'Edit'
    },
    ru: {
      apply: 'Применить',
      edit: 'Редактировать'
    },
    hu: {
      apply: 'Alkalmaz',
      edit: 'Szerkesztés'
    }
  };
  if (inp.hasAttribute('readonly')) {
    inp.removeAttribute('readonly');
    btn.textContent = texts[language].apply;
  } else {
    inp.setAttribute('readonly', '');
    btn.textContent = texts[language].edit;
  }
}
function switchReadonly() {
  if (editBtns) {
    editBtns.forEach(function (btn) {
      btn.addEventListener('click', function () {
        var currentInput = btn.closest('label').querySelector('input');
        toggleAttribute(currentInput, btn);
      });
    });
  }
}

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redirectToProfile = redirectToProfile;
var userBtn = document.querySelector('.logged__btn');
var isTherapist = localStorage.getItem('is_therapist') === 'true';
var userForm = localStorage.getItem('user_form');
function redirectToProfile() {
  if (!userBtn) {
    return;
  }
  userBtn.addEventListener('click', function () {
    if (isTherapist) {
      window.location.href = '/doctor-account-sessions.html';
    } else {
      if (userForm === 'empty') {
        window.location.href = '/user-signup-main.html';
      } else {
        window.location.href = '/user-account-main.html';
      }
    }
  });
}

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandList = expandList;
exports.initScheduleDropdown = initScheduleDropdown;
var showMoreBtn = document.querySelectorAll('.schedule__show-more');
var scheduleDropdown = document.querySelectorAll('.schedule-container');
function initScheduleDropdown() {
  if (!scheduleDropdown) {
    return;
  }
  scheduleDropdown.forEach(function (list) {
    var items = list.querySelectorAll('.doctor__day-wrapper');
    if (items.length === 0) {
      setTimeout(function () {
        initScheduleDropdown();
      }, 200);
    }
    items.forEach(function (item) {
      item.style.display = 'none';
    });
    if (items.length <= 3) {
      items.forEach(function (item) {
        item.style.display = 'block';
      });
    } else {
      for (var i = 0; i < 3; i++) {
        items[i].style.display = 'block';
      }
    }
  });
}
function expandList() {
  if (!showMoreBtn) {
    return;
  }
  showMoreBtn.forEach(function (btn) {
    btn.addEventListener('click', function () {
      var currentList = btn.closest('.schedule-wrapper').querySelector('.schedule-container');
      var items = currentList.querySelectorAll('.doctor__day-wrapper');
      if (items.length === 0) {
        setTimeout(function () {
          expandList();
        }, 200);
        return;
      }
      var shownCount = 0;
      items.forEach(function (item) {
        if (item.style.display === 'block') {
          shownCount++;
        }
      });

      // Показываем следующие 3 элемента
      for (var i = shownCount; i < shownCount + 3 && i < items.length; i++) {
        items[i].style.display = 'block';
      }

      // Если все элементы показаны, скрываем кнопку
      if (shownCount + 3 >= items.length) {
        btn.classList.add('hidden');
      }
    });
  });
}

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showTextInput = showTextInput;
var selects = document.querySelectorAll('select');
var hiddenInput = document.querySelectorAll('.other-input');
function showTextInput() {
  if (hiddenInput) {
    selects.forEach(function (select) {
      var haveHiddenInput = select.nextElementSibling && select.nextElementSibling.classList.contains('other-input');
      select.addEventListener('change', function () {
        if (select.value === 'other' && haveHiddenInput) {
          select.nextElementSibling.classList.add('is-active');
        } else if (select.value !== 'other' && haveHiddenInput) {
          select.nextElementSibling.classList.remove('is-active');
        }
      });
    });
  }
}

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setName = setName;
function setName() {
  var userName = localStorage.getItem('user_name');
  document.querySelectorAll('.gotten-username').forEach(function (el) {
    el.textContent = userName;
  });
}

},{}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showPassword = showPassword;
var showPswdBtn = document.querySelector('.show-password-btn');
var inputPswd = document.querySelector('input[type="password"]');
function togglePassword() {
  var inputType = inputPswd.getAttribute('type');
  if (inputType === 'password') {
    inputPswd.setAttribute('type', 'text');
    showPswdBtn.textContent = 'Скрыть пароль';
  } else {
    inputPswd.setAttribute('type', 'password');
    showPswdBtn.textContent = 'Показать пароль';
  }
}
function showPassword() {
  if (showPswdBtn) {
    showPswdBtn.addEventListener('click', function () {
      togglePassword();
    });
  }
}

},{}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSlider = initSlider;
var slider = document.querySelector('.slider');
var prev = document.querySelector('.btn-prev');
var next = document.querySelector('.btn-next');
var slides = document.querySelectorAll('.slide');
var dots = document.querySelectorAll('.dot');
var index = 0;
function initSlider() {
  if (slider) {
    var activeSlide = function activeSlide(n) {
      slides.forEach(function (slide) {
        slide.classList.remove('is-active');
      });
      slides[n].classList.add('is-active');
    };
    var activeDot = function activeDot(n) {
      dots.forEach(function (dot) {
        dot.classList.remove('is-active');
      });
      dots[n].classList.add('is-active');
    };
    var prepareCurrentSlide = function prepareCurrentSlide() {
      activeSlide(index);
      activeDot(index);
    };
    var nextSlide = function nextSlide() {
      if (index === slides.length - 1) {
        index = 0;
        prepareCurrentSlide(index);
      } else {
        index++;
        prepareCurrentSlide(index);
      }
    };
    var prevSlide = function prevSlide() {
      if (index === 0) {
        index = slides.length - 1;
        prepareCurrentSlide(index);
      } else {
        index--;
        prepareCurrentSlide(index);
      }
    };
    dots.forEach(function (item, indexDot) {
      item.addEventListener('click', function () {
        index = indexDot;
        prepareCurrentSlide(index);
      });
    });
    next.addEventListener('click', nextSlide);
    prev.addEventListener('click', prevSlide);

    // Автоматическое переключение слайдов

    setInterval(function () {
      return nextSlide();
    }, 3000);
  }
}

},{}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initTabs = initTabs;
var tabs = document.querySelectorAll('.tabs');
var tabsBtn = document.querySelectorAll('[tab-btn]');
var tabsItems = document.querySelectorAll('[tab-item]');
function initTabs() {
  if (tabs) {
    tabsBtn.forEach(function (item) {
      item.addEventListener('click', function () {
        var currentBtn = item;
        var tabId = currentBtn.getAttribute('data-tab');
        var currentTab = document.querySelector(tabId);
        if (!currentBtn.classList.contains('is-active')) {
          tabsBtn.forEach(function (tabBtn) {
            tabBtn.classList.remove('is-active');
          });
          tabsItems.forEach(function (tabItem) {
            tabItem.classList.remove('is-active');
          });
          currentBtn.classList.add('is-active');
          currentTab.classList.add('is-active');
        }
      });
    });
  }
}

},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadUserPhoto = uploadUserPhoto;
var hiddenInput = document.querySelector('#user_photo');
var fileName = document.querySelector('.settings__avatar-filename');
function uploadUserPhoto() {
  if (!fileName) {
    return;
  }
  hiddenInput.addEventListener('change', function (event) {
    var files = event.target.files;
    if (files.length > 0) {
      fileName.textContent = files[0].name;
      hiddenInput.value = visibleInput.value;
    } else {
      fileName.textContent = 'файл не выбран';
      hiddenInput.value = '';
    }
  });
}

},{}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setUtilsBtns = setUtilsBtns;
var utilsBtnsMain = document.querySelectorAll('[utils-btn-main]');
var utilsBtnsSettings = document.querySelectorAll('[utils-btn-settings]');
var uaccMain = document.querySelector('.user-account__main');
var uaccSettings = document.querySelector('.user-account__settings');
var daccSettings = document.querySelector('.doctor-account__settings');
function setUtilsBtns() {
  if (utilsBtnsMain && uaccMain) {
    utilsBtnsMain.forEach(function (btn) {
      btn.addEventListener('click', function () {
        var currentBtn = btn;
        var btnId = currentBtn.getAttribute('data-id');
        uaccMain.setAttribute('data-utils', btnId);
      });
    });
  }
  if (utilsBtnsSettings && uaccSettings) {
    utilsBtnsSettings.forEach(function (btn) {
      btn.addEventListener('click', function () {
        var currentBtn = btn;
        var btnId = currentBtn.getAttribute('data-id');
        uaccSettings.setAttribute('data-utils', btnId);
      });
    });
  }
  if (utilsBtnsSettings && daccSettings) {
    utilsBtnsSettings.forEach(function (btn) {
      btn.addEventListener('click', function () {
        var currentBtn = btn;
        var btnId = currentBtn.getAttribute('data-id');
        daccSettings.setAttribute('data-utils', btnId);
      });
    });
  }
}

},{}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setWrapperClass = setWrapperClass;
var isTherapist = localStorage.getItem('is_therapist');
var wrapper = document.querySelector('.wrapper');
function setWrapperClass() {
  if (isTherapist === null || isTherapist === '') {
    if (wrapper.classList.contains('internal')) {
      wrapper.classList = 'wrapper internal';
    } else {
      wrapper.classList = 'wrapper';
    }
  }
  if (isTherapist === 'false') {
    wrapper.classList.add('client');
    if (wrapper.classList.contains('therapist')) {
      wrapper.classList.remove('therapist');
    }
  } else if (isTherapist === 'true') {
    wrapper.classList.add('therapist');
    if (wrapper.classList.contains('client')) {
      wrapper.classList.remove('client');
    }
  }
}

},{}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":23}]},{},[1])


//# sourceMappingURL=main.min.js.map
